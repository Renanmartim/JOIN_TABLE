#-------------------------------------------------------
#BIBLIOTECAS PARA O PROJETO FUNCIONAR
#-------------------------------------------------------

import tkinter as tk
from tkinter import ttk
from pathlib import Path
from tkinterdnd2 import DND_FILES, TkinterDnD
import pandas as pd
from openpyxl import Workbook, load_workbook
from ast import Compare

#-------------------------------------------------------
#PARTE QUE CONCATENA COLUNAS
#-------------------------------------------------------

#Localiza as planilhas na pasta

impo1 = pd.read_excel('Anterior.xlsx')

impo2 = pd.read_excel('Atual.xlsx')

#Filtra as colunas que queremos concatenar

impo4 = impo1['CD_SEG'].map(str)+ " " + "," + impo1['CRITICA'].map(str) + " " + "," + impo1['CONTRATO'].map(str) + " " + "," + impo1['SEGURADO'].map(str) + " " + "," + impo1['CPF'].map(str)
impo5 = impo2['CD_SEG'].map(str)+ " " + "," + impo2['CRITICA'].map(str) + " " + "," + impo2['CONTRATO'].map(str) + " " + "," + impo2['SEGURADO'].map(str) + " " + "," + impo2['CPF'].map(str)

#Transforma as colunas filtradas e juntas em um arquivo em excel

impo4.to_excel('Criticas-Anterior.xlsx', index=False, columns=None)

impo5.to_excel('Criticas-Atual.xlsx', index=False, columns=None)

#Renomeia a coluna devida

wb = load_workbook('Criticas-Anterior.xlsx')

#Insere um novo valor a coluna (Antes 0)

ws = wb['Sheet1']

ws['A1'] = "Nome"

wb.save('Criticas-Anterior.xlsx')

#Renomeia a coluna devida

wb = load_workbook('Criticas-Atual.xlsx')

#Insere um novo valor a coluna (Antes 0)

ws = wb['Sheet1']

ws['A1'] = "Nome"

wb.save('Criticas-Atual.xlsx')

#-------------------------------------------------------
#PARTE QUE TRATA OS DADOS
#-------------------------------------------------------
#Localizando planilhas

file1 = ('Criticas-Anterior.xlsx')

file2 = ('Criticas-Atual.xlsx')

#Lendo planilhas

ler1 = pd.read_excel(file1)

ler2 = pd.read_excel(file2)

#Concatenando planilhas (Planilha1 e Planilha2)

ler3 = pd.concat([ler1, ler2])

total = pd.concat([ler1, ler2])

#Este bloco seleciona as duas tabelas concatenadas e remove o que está duplicado

ler3.sort_values('Nome', inplace = True)

ler3.drop_duplicates(subset ='Nome', keep = False, inplace = True)

#Junta as tabelas e pega apenas o que se repete

ler4 = pd.merge(ler1, ler2)

#Pega a planilha que concatenamos e excuimos as linhas duplicadas e compara com a planilha 1, ou seja, tudo que estiver somente na planilha um estará também aqui.

ler8 = pd.merge(ler3, ler1)

#Pega a planilha que concatenamos e excuimos as linhas duplicadas e compara com a planilha 1, ou seja, tudo que estiver somente na planilha dois estará também aqui.

ler9 = pd.merge(ler3, ler2)

#Ler9 = Caso novo

ler9.to_excel('Caso-Novo.xlsx', index=False, columns=None)

#Insere quantidade de linhas da tabela

wb1 = load_workbook('Caso-Novo.xlsx')

ws1 = wb1['Sheet1']

ws1['B1'] = "Número de casos novos"

ws1['B2'] = ler9.shape[0]

wb1.save('Caso-Novo.xlsx')

#Ler8 Caso Resolvido

ler8.to_excel('Caso-Resolvido.xlsx', index=False, columns=None)

wb2 = load_workbook('Caso-Resolvido.xlsx')

ws2 = wb2['Sheet1']

ws2['B1'] = "Número de casos resolvidos"

ws2['B2'] = ler8.shape[0]

wb2.save('Caso-Resolvido.xlsx')

#Ler4 Caso não Resolvido

ler4.to_excel('Caso-Não-Resolvido.xlsx', index=False, columns=None)

wb3 = load_workbook('Caso-Não-Resolvido.xlsx')

ws3 = wb3['Sheet1']

ws3['B1'] = "Número de casos não resolvidos"

ws3['B2'] = ler4.shape[0]

wb3.save('Caso-Não-Resolvido.xlsx')

#Total

total.to_excel('Total.xlsx', index=False, columns=None)

wb4 = load_workbook('Total.xlsx')

ws4 = wb4['Sheet1']

ws4['B1'] = "Total de casos"

ws4['B2'] = total.shape[0]

ws4['C1'] = "Total de casos novos"

ws4['C2'] = ler9.shape[0]

ws4['D1'] = "Total de casos resolvidos"

ws4['D2'] = ler8.shape[0]

ws4['E1'] = "Total de casos não resolvidos"

ws4['E2'] = ler4.shape[0]

 

wb4.save('Total.xlsx')




#-------------------------------------------------------
#PARTE PARA NAVEGAR PELAS TABELAS
#-------------------------------------------------------

#-------------------------------------------------------
#PARTE PARA NAVEGAR PELAS TABELAS
#-------------------------------------------------------

#Aplicação GUI

class Application(TkinterDnD.Tk):
    def __init__(self):
        super().__init__()
        self.title("VISUALIZADOR EXCEL")
        self.main_frame = tk.Frame(self)
        self.main_frame.pack(fill="both", expand="true")
        self.geometry("900x500")
        self.search_page = SearchPage(parent=self.main_frame)

#Navegabilidade pelo excel

class DataTable(ttk.Treeview):
    def __init__(self, parent):
        super().__init__(parent)
        scroll_Y = tk.Scrollbar(self, orient="vertical", command=self.yview)
        scroll_X = tk.Scrollbar(self, orient="horizontal", command=self.xview)
        self.configure(yscrollcommand=scroll_Y.set, xscrollcommand=scroll_X.set)
        scroll_Y.pack(side="right", fill="y")
        scroll_X.pack(side="bottom", fill="x")
        self.stored_dataframe = pd.DataFrame()

    def set_datatable(self, dataframe):
        self.stored_dataframe = dataframe
        self._draw_table(dataframe)

    def _draw_table(self, dataframe):
        self.delete(*self.get_children())
        columns = list(dataframe.columns)
        self.__setitem__("column", columns)
        self.__setitem__("show", "headings")

        for col in columns:
            self.heading(col, text=col)

        df_rows = dataframe.to_numpy().tolist()
        for row in df_rows:
            self.insert("", "end", values=row)
        return None

    def find_value(self, pairs):
        #  << Procura valor digitado no campo branco (Apenas String) >>
        new_df = self.stored_dataframe
        for col, value in pairs.items():
            query_string = f"{col}.str.contains('{value}')"
            new_df = new_df.query(query_string, engine="python")
        self._draw_table(new_df)

    def reset_table(self):
        self._draw_table(self.stored_dataframe)

# Classe para procurar tabelas excel

class SearchPage(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.file_names_listbox = tk.Listbox(parent, selectmode=tk.SINGLE, background="darkgray")
        self.file_names_listbox.place(relheight=1, relwidth=0.25)
        self.file_names_listbox.insert(1,'Caso-Não-Resolvido.xlsx')
        self.file_names_listbox.insert(2,'Caso-Novo.xlsx')
        self.file_names_listbox.insert(3,'Caso-Resolvido.xlsx')
        self.file_names_listbox.insert(4,'Total.xlsx')
        self.file_names_listbox.bind("<Double-1>", self._display_file)

        #Procura valor especifíco

        self.search_entrybox = tk.Entry(parent)
        self.search_entrybox.place(relx=0.25, relwidth=0.75)
        self.search_entrybox.bind("<Return>", self.search_table)

        #Vizualização

        self.data_table = DataTable(parent)
        self.data_table.place(rely=0.05, relx=0.25, relwidth=0.75, relheight=0.95)

        #Lista de arquivos

        self.path_map = {'Caso-Não-Resolvido.xlsx': 'C:/Users/T787155/Desktop/PJT_RENATO_AUTO/Caso-Não-Resolvido.xlsx',
                    'Caso-Novo.xlsx': 'C:/Users/T787155/Desktop/PJT_RENATO_AUTO/Caso-Novo.xlsx',
                    'Caso-Resolvido.xlsx': 'C:/Users/T787155/Desktop/PJT_RENATO_AUTO/Caso-Resolvido.xlsx',
                    'Total.xlsx': 'C:/Users/T787155/Desktop/PJT_RENATO_AUTO/Total.xlsx'}


    #Parte que lêos arquivos em excel e exibe-os

    def _display_file(self, event):
        file_name = self.file_names_listbox.get(self.file_names_listbox.curselection())
        path = self.path_map[file_name]
        df = pd.read_excel(path)
        self.data_table.set_datatable(dataframe=df)


    #Procura valor especifíco na tabela e retorna para(find_value)

    def search_table(self, event): 
        # coluna valor. [[coluna,valor],coluna2=valor2]....
        entry = self.search_entrybox.get()
        if entry == "":
            self.data_table.reset_table()
        else:
            entry_split = entry.split(",")
            column_value_pairs = {}
            for pair in entry_split:
                pair_split = pair.split("=")
                if len(pair_split) == 2:
                    col = pair_split[0]
                    lookup_value = pair_split[1]
                    column_value_pairs[col] = lookup_value
            self.data_table.find_value(pairs=column_value_pairs)

#Start da aplicação e exibição

if __name__ == "__main__":
    root = Application()
    root.mainloop()
